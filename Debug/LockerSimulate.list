
LockerSimulate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f64  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005190  08005190  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005198  08005198  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080051ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080051ac  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fe7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f91  00000000  00000000  00032023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00033fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00034f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a0d  00000000  00000000  00035da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fb7  00000000  00000000  0005f7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001059f1  00000000  00000000  00071764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177155  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f4  00000000  00000000  001771a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005108 	.word	0x08005108

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005108 	.word	0x08005108

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <ping_stream_response>:
   and an already recieved message from upstream.

   The function will then send the downstream message,
   wait and then send the upstream message.
*/
void ping_stream_response(UART_HandleTypeDef *huart_up, UART_HandleTypeDef *huart_down, uint8_t message) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	4613      	mov	r3, r2
 800050c:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[1] = {(message - 4)};
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	3b04      	subs	r3, #4
 8000512:	b2db      	uxtb	r3, r3
 8000514:	743b      	strb	r3, [r7, #16]
    HAL_UART_Transmit(huart_down, buffer, 1, 1000);
 8000516:	f107 0110 	add.w	r1, r7, #16
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	2201      	movs	r2, #1
 8000520:	68b8      	ldr	r0, [r7, #8]
 8000522:	f003 fea5 	bl	8004270 <HAL_UART_Transmit>
    int delay_time = 15 * message;
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	4613      	mov	r3, r2
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef receiveStatus = HAL_UART_Receive(huart_down, buffer, 1, delay_time);
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	f107 0110 	add.w	r1, r7, #16
 8000536:	2201      	movs	r2, #1
 8000538:	68b8      	ldr	r0, [r7, #8]
 800053a:	f003 ff30 	bl	800439e <HAL_UART_Receive>
 800053e:	4603      	mov	r3, r0
 8000540:	74fb      	strb	r3, [r7, #19]
    if( (receiveStatus == HAL_OK) && ((buffer[0] & 3) == 3)) {
 8000542:	7cfb      	ldrb	r3, [r7, #19]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d109      	bne.n	800055c <ping_stream_response+0x5c>
 8000548:	7c3b      	ldrb	r3, [r7, #16]
 800054a:	f003 0303 	and.w	r3, r3, #3
 800054e:	2b03      	cmp	r3, #3
 8000550:	d104      	bne.n	800055c <ping_stream_response+0x5c>
        buffer[0] = buffer[0] + 4;
 8000552:	7c3b      	ldrb	r3, [r7, #16]
 8000554:	3304      	adds	r3, #4
 8000556:	b2db      	uxtb	r3, r3
 8000558:	743b      	strb	r3, [r7, #16]
 800055a:	e001      	b.n	8000560 <ping_stream_response+0x60>
    } else {
        buffer[0] = 0b00000011;
 800055c:	2303      	movs	r3, #3
 800055e:	743b      	strb	r3, [r7, #16]
    }
    // buffer[0] = 0b00000011;
    HAL_UART_Transmit(huart_up, buffer, 1, 1000);
 8000560:	f107 0110 	add.w	r1, r7, #16
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	2201      	movs	r2, #1
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f003 fe80 	bl	8004270 <HAL_UART_Transmit>
    return;
 8000570:	bf00      	nop
}
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fde6 	bl	800114e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f88f 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9e1 	bl	800094c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800058a:	f000 f993 	bl	80008b4 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800058e:	f000 f8cf 	bl	8000730 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f943 	bl	800081c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_buff[1] = {0};
 8000596:	2300      	movs	r3, #0
 8000598:	713b      	strb	r3, [r7, #4]
  uint8_t state = 0; // 0 = LED OFF, 1 = LED ON
 800059a:	2300      	movs	r3, #0
 800059c:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800059e:	2100      	movs	r1, #0
 80005a0:	483b      	ldr	r0, [pc, #236]	; (8000690 <main+0x118>)
 80005a2:	f002 fe79 	bl	8003298 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef receiveStatus = HAL_UART_Receive(&huart3, data_buff, 1, 10000);
 80005a6:	1d39      	adds	r1, r7, #4
 80005a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80005ac:	2201      	movs	r2, #1
 80005ae:	4839      	ldr	r0, [pc, #228]	; (8000694 <main+0x11c>)
 80005b0:	f003 fef5 	bl	800439e <HAL_UART_Receive>
 80005b4:	4603      	mov	r3, r0
 80005b6:	71bb      	strb	r3, [r7, #6]
	  if(receiveStatus == HAL_OK) {
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1f3      	bne.n	80005a6 <main+0x2e>
		  uint8_t message = data_buff[0];
 80005be:	793b      	ldrb	r3, [r7, #4]
 80005c0:	717b      	strb	r3, [r7, #5]
		  if(message == 1){ // Opening
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d11d      	bne.n	8000604 <main+0x8c>
			  if(state == 1) continue;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d05b      	beq.n	8000686 <main+0x10e>
			  state = 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1); // MOFSET for solenoid ON
 80005d2:	2201      	movs	r2, #1
 80005d4:	2110      	movs	r1, #16
 80005d6:	4830      	ldr	r0, [pc, #192]	; (8000698 <main+0x120>)
 80005d8:	f001 f8ca 	bl	8001770 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1); // H-Bridge for extend ON
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	482d      	ldr	r0, [pc, #180]	; (8000698 <main+0x120>)
 80005e2:	f001 f8c5 	bl	8001770 <HAL_GPIO_WritePin>
			  HAL_Delay(2450);
 80005e6:	f640 1092 	movw	r0, #2450	; 0x992
 80005ea:	f000 fe25 	bl	8001238 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0); // MOFSET for solenoid OFF
 80005ee:	2200      	movs	r2, #0
 80005f0:	2110      	movs	r1, #16
 80005f2:	4829      	ldr	r0, [pc, #164]	; (8000698 <main+0x120>)
 80005f4:	f001 f8bc 	bl	8001770 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0); // H-Bridge for extend OFF
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	4826      	ldr	r0, [pc, #152]	; (8000698 <main+0x120>)
 80005fe:	f001 f8b7 	bl	8001770 <HAL_GPIO_WritePin>
 8000602:	e019      	b.n	8000638 <main+0xc0>
		  } else if( (message & 0x03) == 0x03) {
 8000604:	797b      	ldrb	r3, [r7, #5]
 8000606:	f003 0303 	and.w	r3, r3, #3
 800060a:	2b03      	cmp	r3, #3
 800060c:	d106      	bne.n	800061c <main+0xa4>
			  ping_stream_response(&huart3, &huart2, message);
 800060e:	797b      	ldrb	r3, [r7, #5]
 8000610:	461a      	mov	r2, r3
 8000612:	4922      	ldr	r1, [pc, #136]	; (800069c <main+0x124>)
 8000614:	481f      	ldr	r0, [pc, #124]	; (8000694 <main+0x11c>)
 8000616:	f7ff ff73 	bl	8000500 <ping_stream_response>
 800061a:	e00d      	b.n	8000638 <main+0xc0>
		  } else if(message > 3) {
 800061c:	797b      	ldrb	r3, [r7, #5]
 800061e:	2b03      	cmp	r3, #3
 8000620:	d90a      	bls.n	8000638 <main+0xc0>
			  data_buff[0] = message - 4;
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	3b04      	subs	r3, #4
 8000626:	b2db      	uxtb	r3, r3
 8000628:	713b      	strb	r3, [r7, #4]
			  HAL_UART_Transmit(&huart2, data_buff, 1, 1000);
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	2201      	movs	r2, #1
 8000632:	481a      	ldr	r0, [pc, #104]	; (800069c <main+0x124>)
 8000634:	f003 fe1c 	bl	8004270 <HAL_UART_Transmit>
		  }
		  if(message == 0){ // Closing
 8000638:	797b      	ldrb	r3, [r7, #5]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d11c      	bne.n	8000678 <main+0x100>
			  if(state == 0) continue;
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d022      	beq.n	800068a <main+0x112>
			  state = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1); // H-Bridge for retract ON
 8000648:	2201      	movs	r2, #1
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	4812      	ldr	r0, [pc, #72]	; (8000698 <main+0x120>)
 800064e:	f001 f88f 	bl	8001770 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2110      	movs	r1, #16
 8000656:	4810      	ldr	r0, [pc, #64]	; (8000698 <main+0x120>)
 8000658:	f001 f88a 	bl	8001770 <HAL_GPIO_WritePin>
			  HAL_Delay(3350);
 800065c:	f640 5016 	movw	r0, #3350	; 0xd16
 8000660:	f000 fdea 	bl	8001238 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0); // H-Bridge for retract ON
 8000664:	2200      	movs	r2, #0
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <main+0x120>)
 800066a:	f001 f881 	bl	8001770 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2110      	movs	r1, #16
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <main+0x120>)
 8000674:	f001 f87c 	bl	8001770 <HAL_GPIO_WritePin>
		  }
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, state); // LED
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	461a      	mov	r2, r3
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0x128>)
 8000680:	f001 f876 	bl	8001770 <HAL_GPIO_WritePin>
 8000684:	e78f      	b.n	80005a6 <main+0x2e>
			  if(state == 1) continue;
 8000686:	bf00      	nop
 8000688:	e78d      	b.n	80005a6 <main+0x2e>
			  if(state == 0) continue;
 800068a:	bf00      	nop
  {
 800068c:	e78b      	b.n	80005a6 <main+0x2e>
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028
 8000694:	20000104 	.word	0x20000104
 8000698:	48001000 	.word	0x48001000
 800069c:	20000074 	.word	0x20000074
 80006a0:	48000400 	.word	0x48000400

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b096      	sub	sp, #88	; 0x58
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2244      	movs	r2, #68	; 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fd20 	bl	80050f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ca:	f001 f889 	bl	80017e0 <HAL_PWREx_ControlVoltageScaling>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d4:	f000 fb70 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006d8:	2310      	movs	r3, #16
 80006da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e4:	2360      	movs	r3, #96	; 0x60
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f929 	bl	8001948 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006fc:	f000 fb5c 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fd2f 	bl	800217c <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000724:	f000 fb48 	bl	8000db8 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3758      	adds	r7, #88	; 0x58
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
 800075e:	615a      	str	r2, [r3, #20]
 8000760:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_TIM4_Init+0xe4>)
 8000764:	4a2c      	ldr	r2, [pc, #176]	; (8000818 <MX_TIM4_Init+0xe8>)
 8000766:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_TIM4_Init+0xe4>)
 800076a:	2203      	movs	r2, #3
 800076c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <MX_TIM4_Init+0xe4>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250;
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_TIM4_Init+0xe4>)
 8000776:	22fa      	movs	r2, #250	; 0xfa
 8000778:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_TIM4_Init+0xe4>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_TIM4_Init+0xe4>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000786:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_TIM4_Init+0xe4>)
 8000788:	f002 fcce 	bl	8003128 <HAL_TIM_Base_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000792:	f000 fb11 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800079c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a0:	4619      	mov	r1, r3
 80007a2:	481c      	ldr	r0, [pc, #112]	; (8000814 <MX_TIM4_Init+0xe4>)
 80007a4:	f002 ff92 	bl	80036cc <HAL_TIM_ConfigClockSource>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80007ae:	f000 fb03 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_TIM4_Init+0xe4>)
 80007b4:	f002 fd0f 	bl	80031d6 <HAL_TIM_PWM_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80007be:	f000 fafb 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4810      	ldr	r0, [pc, #64]	; (8000814 <MX_TIM4_Init+0xe4>)
 80007d2:	f003 fc75 	bl	80040c0 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80007dc:	f000 faec 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <MX_TIM4_Init+0xe4>)
 80007f8:	f002 fe54 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000802:	f000 fad9 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <MX_TIM4_Init+0xe4>)
 8000808:	f000 fb62 	bl	8000ed0 <HAL_TIM_MspPostInit>

}
 800080c:	bf00      	nop
 800080e:	3738      	adds	r7, #56	; 0x38
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000028 	.word	0x20000028
 8000818:	40000800 	.word	0x40000800

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <MX_USART2_UART_Init+0x94>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000828:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_USART2_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_USART2_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART2_UART_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000866:	f003 fcb3 	bl	80041d0 <HAL_UART_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000870:	f000 faa2 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000874:	2100      	movs	r1, #0
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_USART2_UART_Init+0x90>)
 8000878:	f004 fb50 	bl	8004f1c <HAL_UARTEx_SetTxFifoThreshold>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000882:	f000 fa99 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <MX_USART2_UART_Init+0x90>)
 800088a:	f004 fb85 	bl	8004f98 <HAL_UARTEx_SetRxFifoThreshold>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000894:	f000 fa90 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_USART2_UART_Init+0x90>)
 800089a:	f004 fb06 	bl	8004eaa <HAL_UARTEx_DisableFifoMode>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008a4:	f000 fa88 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000074 	.word	0x20000074
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_USART3_UART_Init+0x94>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008fe:	f003 fc67 	bl	80041d0 <HAL_UART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 fa56 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000910:	f004 fb04 	bl	8004f1c <HAL_UARTEx_SetTxFifoThreshold>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 fa4d 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000922:	f004 fb39 	bl	8004f98 <HAL_UARTEx_SetRxFifoThreshold>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 fa44 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000932:	f004 faba 	bl	8004eaa <HAL_UARTEx_DisableFifoMode>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800093c:	f000 fa3c 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000104 	.word	0x20000104
 8000948:	40004800 	.word	0x40004800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	4bb3      	ldr	r3, [pc, #716]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4ab2      	ldr	r2, [pc, #712]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000968:	f043 0310 	orr.w	r3, r3, #16
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4bb0      	ldr	r3, [pc, #704]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	623b      	str	r3, [r7, #32]
 8000978:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4bad      	ldr	r3, [pc, #692]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4aac      	ldr	r2, [pc, #688]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4baa      	ldr	r3, [pc, #680]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000992:	4ba7      	ldr	r3, [pc, #668]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4aa6      	ldr	r2, [pc, #664]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000998:	f043 0320 	orr.w	r3, r3, #32
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4ba4      	ldr	r3, [pc, #656]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	4ba1      	ldr	r3, [pc, #644]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4aa0      	ldr	r2, [pc, #640]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b9e      	ldr	r3, [pc, #632]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b9b      	ldr	r3, [pc, #620]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a9a      	ldr	r2, [pc, #616]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b98      	ldr	r3, [pc, #608]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b95      	ldr	r3, [pc, #596]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a94      	ldr	r2, [pc, #592]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b92      	ldr	r3, [pc, #584]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b8f      	ldr	r3, [pc, #572]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a8e      	ldr	r2, [pc, #568]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b8c      	ldr	r3, [pc, #560]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0a:	4b89      	ldr	r3, [pc, #548]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a88      	ldr	r2, [pc, #544]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b86      	ldr	r3, [pc, #536]	; (8000c30 <MX_GPIO_Init+0x2e4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a22:	f000 ff81 	bl	8001928 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2170      	movs	r1, #112	; 0x70
 8000a2a:	4882      	ldr	r0, [pc, #520]	; (8000c34 <MX_GPIO_Init+0x2e8>)
 8000a2c:	f000 fea0 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	4880      	ldr	r0, [pc, #512]	; (8000c38 <MX_GPIO_Init+0x2ec>)
 8000a36:	f000 fe9b 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a4a:	230d      	movs	r3, #13
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4877      	ldr	r0, [pc, #476]	; (8000c34 <MX_GPIO_Init+0x2e8>)
 8000a56:	f000 fcf9 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a5a:	2370      	movs	r3, #112	; 0x70
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4870      	ldr	r0, [pc, #448]	; (8000c34 <MX_GPIO_Init+0x2e8>)
 8000a72:	f000 fceb 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7a:	2312      	movs	r3, #18
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a86:	2304      	movs	r3, #4
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	486a      	ldr	r0, [pc, #424]	; (8000c3c <MX_GPIO_Init+0x2f0>)
 8000a92:	f000 fcdb 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000aa6:	230d      	movs	r3, #13
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4862      	ldr	r0, [pc, #392]	; (8000c3c <MX_GPIO_Init+0x2f0>)
 8000ab2:	f000 fccb 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ab6:	233f      	movs	r3, #63	; 0x3f
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aba:	230b      	movs	r3, #11
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	485d      	ldr	r0, [pc, #372]	; (8000c40 <MX_GPIO_Init+0x2f4>)
 8000aca:	f000 fcbf 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fcae 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000af0:	230a      	movs	r3, #10
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000af4:	230b      	movs	r3, #11
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 fca1 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b0a:	23f0      	movs	r3, #240	; 0xf0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f000 fc90 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	483c      	ldr	r0, [pc, #240]	; (8000c38 <MX_GPIO_Init+0x2ec>)
 8000b48:	f000 fc80 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b50:	230b      	movs	r3, #11
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4836      	ldr	r0, [pc, #216]	; (8000c38 <MX_GPIO_Init+0x2ec>)
 8000b60:	f000 fc74 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b64:	2304      	movs	r3, #4
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4830      	ldr	r0, [pc, #192]	; (8000c38 <MX_GPIO_Init+0x2ec>)
 8000b78:	f000 fc68 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b7c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4826      	ldr	r0, [pc, #152]	; (8000c34 <MX_GPIO_Init+0x2e8>)
 8000b9a:	f000 fc57 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481e      	ldr	r0, [pc, #120]	; (8000c34 <MX_GPIO_Init+0x2e8>)
 8000bbc:	f000 fc46 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4816      	ldr	r0, [pc, #88]	; (8000c38 <MX_GPIO_Init+0x2ec>)
 8000bde:	f000 fc35 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000be2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bf4:	230d      	movs	r3, #13
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480e      	ldr	r0, [pc, #56]	; (8000c38 <MX_GPIO_Init+0x2ec>)
 8000c00:	f000 fc24 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000c16:	230e      	movs	r3, #14
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_GPIO_Init+0x2ec>)
 8000c22:	f000 fc13 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c26:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2c:	e00a      	b.n	8000c44 <MX_GPIO_Init+0x2f8>
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48001000 	.word	0x48001000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48001400 	.word	0x48001400
 8000c40:	48000800 	.word	0x48000800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c50:	2308      	movs	r3, #8
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4853      	ldr	r0, [pc, #332]	; (8000da8 <MX_GPIO_Init+0x45c>)
 8000c5c:	f000 fbf6 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c70:	230d      	movs	r3, #13
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	484c      	ldr	r0, [pc, #304]	; (8000dac <MX_GPIO_Init+0x460>)
 8000c7c:	f000 fbe6 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c90:	2302      	movs	r3, #2
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4844      	ldr	r0, [pc, #272]	; (8000dac <MX_GPIO_Init+0x460>)
 8000c9c:	f000 fbd6 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ca0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	483b      	ldr	r0, [pc, #236]	; (8000dac <MX_GPIO_Init+0x460>)
 8000cbe:	f000 fbc5 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000cc2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f000 fbb3 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f000 fba5 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d02:	2301      	movs	r3, #1
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d12:	2309      	movs	r3, #9
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4824      	ldr	r0, [pc, #144]	; (8000db0 <MX_GPIO_Init+0x464>)
 8000d1e:	f000 fb95 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d22:	2304      	movs	r3, #4
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d32:	230c      	movs	r3, #12
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481c      	ldr	r0, [pc, #112]	; (8000db0 <MX_GPIO_Init+0x464>)
 8000d3e:	f000 fb85 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d42:	2338      	movs	r3, #56	; 0x38
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d52:	2306      	movs	r3, #6
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4815      	ldr	r0, [pc, #84]	; (8000db4 <MX_GPIO_Init+0x468>)
 8000d5e:	f000 fb75 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_GPIO_Init+0x468>)
 8000d7a:	f000 fb67 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d90:	2304      	movs	r3, #4
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_GPIO_Init+0x468>)
 8000d9c:	f000 fb56 	bl	800144c <HAL_GPIO_Init>

}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	48001800 	.word	0x48001800
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000c00 	.word	0x48000c00
 8000db4:	48000400 	.word	0x48000400

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x44>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x44>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x44>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <HAL_TIM_Base_MspInit+0xb4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d144      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6593      	str	r3, [r2, #88]	; 0x58
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e76:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <HAL_TIM_Base_MspInit+0xbc>)
 8000e94:	f000 fada 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <HAL_TIM_Base_MspInit+0xc0>)
 8000eb4:	f000 faca 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40000800 	.word	0x40000800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	48001000 	.word	0x48001000

08000ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <HAL_TIM_MspPostInit+0x64>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11b      	bne.n	8000f2a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_TIM_MspPostInit+0x68>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_TIM_MspPostInit+0x68>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_TIM_MspPostInit+0x68>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f0a:	2340      	movs	r3, #64	; 0x40
 8000f0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_TIM_MspPostInit+0x6c>)
 8000f26:	f000 fa91 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40000800 	.word	0x40000800
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0b0      	sub	sp, #192	; 0xc0
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	2294      	movs	r2, #148	; 0x94
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 f8c9 	bl	80050f8 <memset>
  if(huart->Instance==USART2)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a42      	ldr	r2, [pc, #264]	; (8001074 <HAL_UART_MspInit+0x134>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d13b      	bne.n	8000fe8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fbbb 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f88:	f7ff ff16 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8c:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <HAL_UART_MspInit+0x138>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a39      	ldr	r2, [pc, #228]	; (8001078 <HAL_UART_MspInit+0x138>)
 8000f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b37      	ldr	r3, [pc, #220]	; (8001078 <HAL_UART_MspInit+0x138>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <HAL_UART_MspInit+0x138>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a33      	ldr	r2, [pc, #204]	; (8001078 <HAL_UART_MspInit+0x138>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_UART_MspInit+0x138>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fbc:	2378      	movs	r3, #120	; 0x78
 8000fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4826      	ldr	r0, [pc, #152]	; (800107c <HAL_UART_MspInit+0x13c>)
 8000fe2:	f000 fa33 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe6:	e040      	b.n	800106a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a24      	ldr	r2, [pc, #144]	; (8001080 <HAL_UART_MspInit+0x140>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d13b      	bne.n	800106a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fb7a 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800100a:	f7ff fed5 	bl	8000db8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_UART_MspInit+0x138>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_UART_MspInit+0x138>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6593      	str	r3, [r2, #88]	; 0x58
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_UART_MspInit+0x138>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_UART_MspInit+0x138>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_UART_MspInit+0x138>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0x138>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0x13c>)
 8001066:	f000 f9f1 	bl	800144c <HAL_GPIO_Init>
}
 800106a:	bf00      	nop
 800106c:	37c0      	adds	r7, #192	; 0xc0
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400
 8001078:	40021000 	.word	0x40021000
 800107c:	48000c00 	.word	0x48000c00
 8001080:	40004800 	.word	0x40004800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f892 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001100:	f7ff ffea 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <LoopForever+0x6>)
  ldr r1, =_edata
 8001106:	490d      	ldr	r1, [pc, #52]	; (800113c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <LoopForever+0xe>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800111c:	4c0a      	ldr	r4, [pc, #40]	; (8001148 <LoopForever+0x16>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112a:	f003 ffc1 	bl	80050b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112e:	f7ff fa23 	bl	8000578 <main>

08001132 <LoopForever>:

LoopForever:
    b LoopForever
 8001132:	e7fe      	b.n	8001132 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001134:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001140:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 8001144:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001148:	20000198 	.word	0x20000198

0800114c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC1_IRQHandler>

0800114e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f943 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f80e 	bl	8001180 <HAL_InitTick>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	e001      	b.n	8001174 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001170:	f7ff fe28 	bl	8000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001174:	79fb      	ldrb	r3, [r7, #7]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_InitTick+0x6c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d023      	beq.n	80011dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_InitTick+0x70>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_InitTick+0x6c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f941 	bl	8001432 <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d809      	bhi.n	80011d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f919 	bl	80013fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_InitTick+0x74>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e004      	b.n	80011e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e001      	b.n	80011e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	20000194 	.word	0x20000194

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000194 	.word	0x20000194

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff8e 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff47 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff5c 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff8e 	bl	8001338 <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5d 	bl	80012e4 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffb0 	bl	80013a0 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	e166      	b.n	800172a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8158 	beq.w	8001724 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d005      	beq.n	800148c <HAL_GPIO_Init+0x40>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d130      	bne.n	80014ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c2:	2201      	movs	r2, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 0201 	and.w	r2, r3, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d017      	beq.n	800152a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d123      	bne.n	800157e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0203 	and.w	r2, r3, #3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80b2 	beq.w	8001724 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b61      	ldr	r3, [pc, #388]	; (8001748 <HAL_GPIO_Init+0x2fc>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c4:	4a60      	ldr	r2, [pc, #384]	; (8001748 <HAL_GPIO_Init+0x2fc>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6613      	str	r3, [r2, #96]	; 0x60
 80015cc:	4b5e      	ldr	r3, [pc, #376]	; (8001748 <HAL_GPIO_Init+0x2fc>)
 80015ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d8:	4a5c      	ldr	r2, [pc, #368]	; (800174c <HAL_GPIO_Init+0x300>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001602:	d02b      	beq.n	800165c <HAL_GPIO_Init+0x210>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_GPIO_Init+0x304>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d025      	beq.n	8001658 <HAL_GPIO_Init+0x20c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a51      	ldr	r2, [pc, #324]	; (8001754 <HAL_GPIO_Init+0x308>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d01f      	beq.n	8001654 <HAL_GPIO_Init+0x208>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a50      	ldr	r2, [pc, #320]	; (8001758 <HAL_GPIO_Init+0x30c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d019      	beq.n	8001650 <HAL_GPIO_Init+0x204>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a4f      	ldr	r2, [pc, #316]	; (800175c <HAL_GPIO_Init+0x310>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_GPIO_Init+0x200>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_GPIO_Init+0x314>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1fc>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <HAL_GPIO_Init+0x318>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1f8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_GPIO_Init+0x31c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1f4>
 800163c:	2307      	movs	r3, #7
 800163e:	e00e      	b.n	800165e <HAL_GPIO_Init+0x212>
 8001640:	2308      	movs	r3, #8
 8001642:	e00c      	b.n	800165e <HAL_GPIO_Init+0x212>
 8001644:	2306      	movs	r3, #6
 8001646:	e00a      	b.n	800165e <HAL_GPIO_Init+0x212>
 8001648:	2305      	movs	r3, #5
 800164a:	e008      	b.n	800165e <HAL_GPIO_Init+0x212>
 800164c:	2304      	movs	r3, #4
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x212>
 8001650:	2303      	movs	r3, #3
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x212>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x212>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x212>
 800165c:	2300      	movs	r3, #0
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800166e:	4937      	ldr	r1, [pc, #220]	; (800174c <HAL_GPIO_Init+0x300>)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_GPIO_Init+0x320>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016a0:	4a32      	ldr	r2, [pc, #200]	; (800176c <HAL_GPIO_Init+0x320>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_GPIO_Init+0x320>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ca:	4a28      	ldr	r2, [pc, #160]	; (800176c <HAL_GPIO_Init+0x320>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_GPIO_Init+0x320>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_GPIO_Init+0x320>)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_GPIO_Init+0x320>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_GPIO_Init+0x320>)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f ae91 	bne.w	800145c <HAL_GPIO_Init+0x10>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000
 800174c:	40010000 	.word	0x40010000
 8001750:	48000400 	.word	0x48000400
 8001754:	48000800 	.word	0x48000800
 8001758:	48000c00 	.word	0x48000c00
 800175c:	48001000 	.word	0x48001000
 8001760:	48001400 	.word	0x48001400
 8001764:	48001800 	.word	0x48001800
 8001768:	48001c00 	.word	0x48001c00
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800178c:	e002      	b.n	8001794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b0:	d102      	bne.n	80017b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80017b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b6:	e00b      	b.n	80017d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80017ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c6:	d102      	bne.n	80017ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80017c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017cc:	e000      	b.n	80017d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80017ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40007000 	.word	0x40007000

080017e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d141      	bne.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ee:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	d131      	bne.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017fc:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001802:	4a46      	ldr	r2, [pc, #280]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001814:	4a41      	ldr	r2, [pc, #260]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800181c:	4b40      	ldr	r3, [pc, #256]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2232      	movs	r2, #50	; 0x32
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9b      	lsrs	r3, r3, #18
 800182e:	3301      	adds	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001832:	e002      	b.n	800183a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3b01      	subs	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001846:	d102      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f2      	bne.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185a:	d158      	bne.n	800190e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e057      	b.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001860:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001866:	4a2d      	ldr	r2, [pc, #180]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001870:	e04d      	b.n	800190e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001878:	d141      	bne.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d131      	bne.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800188e:	4a23      	ldr	r2, [pc, #140]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001898:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a0:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2232      	movs	r2, #50	; 0x32
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	0c9b      	lsrs	r3, r3, #18
 80018ba:	3301      	adds	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018be:	e002      	b.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d2:	d102      	bne.n	80018da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f2      	bne.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e6:	d112      	bne.n	800190e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e011      	b.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018fc:	e007      	b.n	800190e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40007000 	.word	0x40007000
 8001920:	20000000 	.word	0x20000000
 8001924:	431bde83 	.word	0x431bde83

08001928 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_PWREx_EnableVddIO2+0x1c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001936:	6053      	str	r3, [r2, #4]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40007000 	.word	0x40007000

08001948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	f000 bc08 	b.w	800216c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195c:	4b96      	ldr	r3, [pc, #600]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001966:	4b94      	ldr	r3, [pc, #592]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80e4 	beq.w	8001b46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_RCC_OscConfig+0x4c>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	f040 808b 	bne.w	8001aa2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b01      	cmp	r3, #1
 8001990:	f040 8087 	bne.w	8001aa2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001994:	4b88      	ldr	r3, [pc, #544]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_OscConfig+0x64>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e3df      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1a      	ldr	r2, [r3, #32]
 80019b0:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <HAL_RCC_OscConfig+0x7e>
 80019bc:	4b7e      	ldr	r3, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c4:	e005      	b.n	80019d2 <HAL_RCC_OscConfig+0x8a>
 80019c6:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d223      	bcs.n	8001a1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fdcc 	bl	8002578 <RCC_SetFlashLatencyFromMSIRange>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e3c0      	b.n	800216c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a72      	ldr	r2, [pc, #456]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	496d      	ldr	r1, [pc, #436]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a08:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	4968      	ldr	r1, [pc, #416]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e025      	b.n	8001a6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1e:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4960      	ldr	r1, [pc, #384]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	495b      	ldr	r1, [pc, #364]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fd8c 	bl	8002578 <RCC_SetFlashLatencyFromMSIRange>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e380      	b.n	800216c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a6a:	f000 fcc1 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	4950      	ldr	r1, [pc, #320]	; (8001bbc <HAL_RCC_OscConfig+0x274>)
 8001a7c:	5ccb      	ldrb	r3, [r1, r3]
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
 8001a86:	4a4e      	ldr	r2, [pc, #312]	; (8001bc0 <HAL_RCC_OscConfig+0x278>)
 8001a88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a8a:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fb76 	bl	8001180 <HAL_InitTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d052      	beq.n	8001b44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	e364      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d032      	beq.n	8001b10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a42      	ldr	r2, [pc, #264]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fbb3 	bl	8001220 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001abe:	f7ff fbaf 	bl	8001220 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e34d      	b.n	800216c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad0:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001adc:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a35      	ldr	r2, [pc, #212]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4930      	ldr	r1, [pc, #192]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afa:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	492b      	ldr	r1, [pc, #172]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
 8001b0e:	e01a      	b.n	8001b46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a28      	ldr	r2, [pc, #160]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb80 	bl	8001220 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b24:	f7ff fb7c 	bl	8001220 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e31a      	b.n	800216c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1dc>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d073      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_OscConfig+0x21c>
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d10e      	bne.n	8001b7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d10b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d063      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2f0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d15f      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e2f7      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d106      	bne.n	8001b94 <HAL_RCC_OscConfig+0x24c>
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e025      	b.n	8001be0 <HAL_RCC_OscConfig+0x298>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9c:	d114      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x280>
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a02      	ldr	r2, [pc, #8]	; (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e013      	b.n	8001be0 <HAL_RCC_OscConfig+0x298>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08005120 	.word	0x08005120
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	4ba0      	ldr	r3, [pc, #640]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a9f      	ldr	r2, [pc, #636]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b9d      	ldr	r3, [pc, #628]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a9c      	ldr	r2, [pc, #624]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb1a 	bl	8001220 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fb16 	bl	8001220 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e2b4      	b.n	800216c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x2a8>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff fb06 	bl	8001220 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fb02 	bl	8001220 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e2a0      	b.n	800216c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2a:	4b88      	ldr	r3, [pc, #544]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x2d0>
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d060      	beq.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_OscConfig+0x310>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d119      	bne.n	8001c86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d116      	bne.n	8001c86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c58:	4b7c      	ldr	r3, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_OscConfig+0x328>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e27d      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	4973      	ldr	r1, [pc, #460]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	e040      	b.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d023      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6e      	ldr	r2, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fac1 	bl	8001220 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fabd 	bl	8001220 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e25b      	b.n	800216c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb4:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	495f      	ldr	r1, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e018      	b.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5c      	ldr	r2, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fa9d 	bl	8001220 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff fa99 	bl	8001220 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e237      	b.n	800216c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d03c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1c:	4b4b      	ldr	r3, [pc, #300]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d22:	4a4a      	ldr	r2, [pc, #296]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fa78 	bl	8001220 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fa74 	bl	8001220 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e212      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ef      	beq.n	8001d34 <HAL_RCC_OscConfig+0x3ec>
 8001d54:	e01b      	b.n	8001d8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	4a3b      	ldr	r2, [pc, #236]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	f7ff fa5b 	bl	8001220 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fa57 	bl	8001220 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1f5      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ef      	bne.n	8001d6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80a6 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10d      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db6:	6593      	str	r3, [r2, #88]	; 0x58
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x508>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d118      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_OscConfig+0x508>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x508>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de0:	f7ff fa1e 	bl	8001220 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de8:	f7ff fa1a 	bl	8001220 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1b8      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_RCC_OscConfig+0x508>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4d8>
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1e:	e029      	b.n	8001e74 <HAL_RCC_OscConfig+0x52c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d115      	bne.n	8001e54 <HAL_RCC_OscConfig+0x50c>
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <HAL_RCC_OscConfig+0x504>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x52c>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
 8001e54:	4b9d      	ldr	r3, [pc, #628]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a9c      	ldr	r2, [pc, #624]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e64:	4b99      	ldr	r3, [pc, #612]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a98      	ldr	r2, [pc, #608]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d016      	beq.n	8001eaa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff f9d0 	bl	8001220 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff f9cc 	bl	8001220 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e168      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9a:	4b8c      	ldr	r3, [pc, #560]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ed      	beq.n	8001e84 <HAL_RCC_OscConfig+0x53c>
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f9b9 	bl	8001220 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff f9b5 	bl	8001220 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e151      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec8:	4b80      	ldr	r3, [pc, #512]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ed      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001edc:	4b7b      	ldr	r3, [pc, #492]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a7a      	ldr	r2, [pc, #488]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d03c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001efc:	4b73      	ldr	r3, [pc, #460]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f02:	4a72      	ldr	r2, [pc, #456]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f988 	bl	8001220 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f14:	f7ff f984 	bl	8001220 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e122      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f26:	4b69      	ldr	r3, [pc, #420]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ef      	beq.n	8001f14 <HAL_RCC_OscConfig+0x5cc>
 8001f34:	e01b      	b.n	8001f6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f36:	4b65      	ldr	r3, [pc, #404]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3c:	4a63      	ldr	r2, [pc, #396]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7ff f96b 	bl	8001220 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4e:	f7ff f967 	bl	8001220 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e105      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f60:	4b5a      	ldr	r3, [pc, #360]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80f9 	beq.w	800216a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	f040 80cf 	bne.w	8002120 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f82:	4b52      	ldr	r3, [pc, #328]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0203 	and.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d12c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d123      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d113      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d109      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d071      	beq.n	80020d4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d068      	beq.n	80020c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ff6:	4b35      	ldr	r3, [pc, #212]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0ac      	b.n	800216c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002012:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2d      	ldr	r2, [pc, #180]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8002018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800201e:	f7ff f8ff 	bl	8001220 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f8fb 	bl	8001220 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e099      	b.n	800216c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_RCC_OscConfig+0x788>)
 800204a:	4013      	ands	r3, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002054:	3a01      	subs	r2, #1
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	4311      	orrs	r1, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800205e:	0212      	lsls	r2, r2, #8
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002066:	0852      	lsrs	r2, r2, #1
 8002068:	3a01      	subs	r2, #1
 800206a:	0552      	lsls	r2, r2, #21
 800206c:	4311      	orrs	r1, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002072:	0852      	lsrs	r2, r2, #1
 8002074:	3a01      	subs	r2, #1
 8002076:	0652      	lsls	r2, r2, #25
 8002078:	4311      	orrs	r1, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800207e:	06d2      	lsls	r2, r2, #27
 8002080:	430a      	orrs	r2, r1
 8002082:	4912      	ldr	r1, [pc, #72]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020a0:	f7ff f8be 	bl	8001220 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff f8ba 	bl	8001220 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e058      	b.n	800216c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <HAL_RCC_OscConfig+0x784>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c6:	e050      	b.n	800216a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e04f      	b.n	800216c <HAL_RCC_OscConfig+0x824>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d144      	bne.n	800216a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a20      	ldr	r2, [pc, #128]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020f8:	f7ff f892 	bl	8001220 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff f88e 	bl	8001220 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e02c      	b.n	800216c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x7b8>
 800211e:	e024      	b.n	800216a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d01f      	beq.n	8002166 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 800212c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f875 	bl	8001220 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff f871 	bl	8001220 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e00f      	b.n	800216c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4905      	ldr	r1, [pc, #20]	; (8002174 <HAL_RCC_OscConfig+0x82c>)
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_OscConfig+0x830>)
 8002160:	4013      	ands	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
 8002164:	e001      	b.n	800216a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	feeefffc 	.word	0xfeeefffc

0800217c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e11d      	b.n	80023d0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	4b90      	ldr	r3, [pc, #576]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d910      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 020f 	bic.w	r2, r3, #15
 80021aa:	498b      	ldr	r1, [pc, #556]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e105      	b.n	80023d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	4b81      	ldr	r3, [pc, #516]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021dc:	429a      	cmp	r2, r3
 80021de:	d908      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e0:	4b7e      	ldr	r3, [pc, #504]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	497b      	ldr	r1, [pc, #492]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d079      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d11e      	bne.n	8002244 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	4b75      	ldr	r3, [pc, #468]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0dc      	b.n	80023d0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002216:	f000 fa09 	bl	800262c <RCC_GetSysClockFreqFromPLLSource>
 800221a:	4603      	mov	r3, r0
 800221c:	4a70      	ldr	r2, [pc, #448]	; (80023e0 <HAL_RCC_ClockConfig+0x264>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d946      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d140      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002236:	4a69      	ldr	r2, [pc, #420]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e035      	b.n	80022b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d107      	bne.n	800225c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224c:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d115      	bne.n	8002284 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0b9      	b.n	80023d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002264:	4b5d      	ldr	r3, [pc, #372]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0ad      	b.n	80023d0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002274:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0a5      	b.n	80023d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002284:	f000 f8b4 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8002288:	4603      	mov	r3, r0
 800228a:	4a55      	ldr	r2, [pc, #340]	; (80023e0 <HAL_RCC_ClockConfig+0x264>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d90f      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002290:	4b52      	ldr	r3, [pc, #328]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a4:	4a4d      	ldr	r2, [pc, #308]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80022a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022b0:	4b4a      	ldr	r3, [pc, #296]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 0203 	bic.w	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4947      	ldr	r1, [pc, #284]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c2:	f7fe ffad 	bl	8001220 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ca:	f7fe ffa9 	bl	8001220 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e077      	b.n	80023d0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e0:	4b3e      	ldr	r3, [pc, #248]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 020c 	and.w	r2, r3, #12
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d1eb      	bne.n	80022ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022f8:	4b38      	ldr	r3, [pc, #224]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a37      	ldr	r2, [pc, #220]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80022fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002302:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	492b      	ldr	r1, [pc, #172]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d210      	bcs.n	8002362 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 020f 	bic.w	r2, r3, #15
 8002348:	4923      	ldr	r1, [pc, #140]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e036      	b.n	80023d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4918      	ldr	r1, [pc, #96]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4910      	ldr	r1, [pc, #64]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a0:	f000 f826 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <HAL_RCC_ClockConfig+0x268>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x26c>)
 80023be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fedb 	bl	8001180 <HAL_InitTick>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	04c4b400 	.word	0x04c4b400
 80023e4:	08005120 	.word	0x08005120
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002408:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x34>
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d121      	bne.n	8002462 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d11e      	bne.n	8002462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002424:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002430:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e005      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800244c:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10d      	bne.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d102      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_GetSysClockFreq+0x110>)
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	e004      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d101      	bne.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_RCC_GetSysClockFreq+0x114>)
 8002476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d134      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0xa6>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d003      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0xac>
 8002494:	e005      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_GetSysClockFreq+0x110>)
 8002498:	617b      	str	r3, [r7, #20]
      break;
 800249a:	e005      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_RCC_GetSysClockFreq+0x114>)
 800249e:	617b      	str	r3, [r7, #20]
      break;
 80024a0:	e002      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	617b      	str	r3, [r7, #20]
      break;
 80024a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3301      	adds	r3, #1
 80024b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	fb03 f202 	mul.w	r2, r3, r2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	0e5b      	lsrs	r3, r3, #25
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	3301      	adds	r3, #1
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024e8:	69bb      	ldr	r3, [r7, #24]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08005138 	.word	0x08005138
 8002500:	00f42400 	.word	0x00f42400
 8002504:	007a1200 	.word	0x007a1200

08002508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_RCC_GetHCLKFreq+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000000 	.word	0x20000000

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002524:	f7ff fff0 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4904      	ldr	r1, [pc, #16]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	08005130 	.word	0x08005130

0800254c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002550:	f7ff ffda 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	0adb      	lsrs	r3, r3, #11
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	08005130 	.word	0x08005130

08002578 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002590:	f7ff f906 	bl	80017a0 <HAL_PWREx_GetVoltageRange>
 8002594:	6178      	str	r0, [r7, #20]
 8002596:	e014      	b.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6593      	str	r3, [r2, #88]	; 0x58
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025b0:	f7ff f8f6 	bl	80017a0 <HAL_PWREx_GetVoltageRange>
 80025b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c8:	d10b      	bne.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d913      	bls.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2ba0      	cmp	r3, #160	; 0xa0
 80025d4:	d902      	bls.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d6:	2302      	movs	r3, #2
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	e00d      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025dc:	2301      	movs	r3, #1
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	e00a      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b7f      	cmp	r3, #127	; 0x7f
 80025e6:	d902      	bls.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80025e8:	2302      	movs	r3, #2
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	e004      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b70      	cmp	r3, #112	; 0x70
 80025f2:	d101      	bne.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025f4:	2301      	movs	r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 020f 	bic.w	r2, r3, #15
 8002600:	4909      	ldr	r1, [pc, #36]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	40022000 	.word	0x40022000

0800262c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d00b      	beq.n	800265a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d825      	bhi.n	8002694 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d008      	beq.n	8002660 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d11f      	bne.n	8002694 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002656:	613b      	str	r3, [r7, #16]
    break;
 8002658:	e01f      	b.n	800269a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800265c:	613b      	str	r3, [r7, #16]
    break;
 800265e:	e01c      	b.n	800269a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d107      	bne.n	800267c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800266c:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e005      	b.n	8002688 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002690:	613b      	str	r3, [r7, #16]
    break;
 8002692:	e002      	b.n	800269a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
    break;
 8002698:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	3301      	adds	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	fb03 f202 	mul.w	r2, r3, r2
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0e5b      	lsrs	r3, r3, #25
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80026da:	683b      	ldr	r3, [r7, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	00f42400 	.word	0x00f42400
 80026f0:	007a1200 	.word	0x007a1200
 80026f4:	08005138 	.word	0x08005138

080026f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002700:	2300      	movs	r3, #0
 8002702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002704:	2300      	movs	r3, #0
 8002706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002710:	2b00      	cmp	r3, #0
 8002712:	d040      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d02a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d825      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d026      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002724:	2b60      	cmp	r3, #96	; 0x60
 8002726:	d821      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d006      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d81d      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002734:	2b20      	cmp	r3, #32
 8002736:	d010      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002738:	e018      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800273a:	4b89      	ldr	r3, [pc, #548]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4a88      	ldr	r2, [pc, #544]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002746:	e015      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fb02 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002758:	e00c      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3320      	adds	r3, #32
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fbed 	bl	8002f40 <RCCEx_PLLSAI2_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800276a:	e003      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	74fb      	strb	r3, [r7, #19]
      break;
 8002770:	e000      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10b      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800277a:	4b79      	ldr	r3, [pc, #484]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800277c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002780:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002788:	4975      	ldr	r1, [pc, #468]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002790:	e001      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d047      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d030      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80027ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b0:	d82a      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027b6:	d02a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80027b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027bc:	d824      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c2:	d008      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80027c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c8:	d81e      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80027ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d2:	d010      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027d4:	e018      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027d6:	4b62      	ldr	r3, [pc, #392]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a61      	ldr	r2, [pc, #388]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027e2:	e015      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fab4 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027f4:	e00c      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3320      	adds	r3, #32
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fb9f 	bl	8002f40 <RCCEx_PLLSAI2_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002806:	e003      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	74fb      	strb	r3, [r7, #19]
      break;
 800280c:	e000      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800280e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10b      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002816:	4b52      	ldr	r3, [pc, #328]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	494e      	ldr	r1, [pc, #312]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800282c:	e001      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 809f 	beq.w	800297e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002854:	2300      	movs	r3, #0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a40      	ldr	r2, [pc, #256]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
 8002866:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002876:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a3a      	ldr	r2, [pc, #232]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002882:	f7fe fccd 	bl	8001220 <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002888:	e009      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe fcc9 	bl	8001220 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d902      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	74fb      	strb	r3, [r7, #19]
        break;
 800289c:	e005      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800289e:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ef      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d15b      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028b0:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01f      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d019      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028fa:	4a19      	ldr	r2, [pc, #100]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d016      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fc88 	bl	8001220 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	e00b      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fe fc84 	bl	8001220 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d902      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	74fb      	strb	r3, [r7, #19]
            break;
 800292a:	e006      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0ec      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10c      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002958:	e008      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	74bb      	strb	r3, [r7, #18]
 800295e:	e005      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296c:	7c7b      	ldrb	r3, [r7, #17]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	4a9f      	ldr	r2, [pc, #636]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800298a:	4b9a      	ldr	r3, [pc, #616]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f023 0203 	bic.w	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	4996      	ldr	r1, [pc, #600]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ac:	4b91      	ldr	r3, [pc, #580]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f023 020c 	bic.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	498e      	ldr	r1, [pc, #568]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	4985      	ldr	r1, [pc, #532]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029f0:	4b80      	ldr	r3, [pc, #512]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	497d      	ldr	r1, [pc, #500]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a12:	4b78      	ldr	r3, [pc, #480]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a20:	4974      	ldr	r1, [pc, #464]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a34:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a42:	496c      	ldr	r1, [pc, #432]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a56:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a64:	4963      	ldr	r1, [pc, #396]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a78:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a86:	495b      	ldr	r1, [pc, #364]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	4952      	ldr	r1, [pc, #328]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002abc:	4b4d      	ldr	r3, [pc, #308]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	494a      	ldr	r1, [pc, #296]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ade:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	4941      	ldr	r1, [pc, #260]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b00:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	4939      	ldr	r1, [pc, #228]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d028      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b22:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b30:	4930      	ldr	r1, [pc, #192]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4c:	60d3      	str	r3, [r2, #12]
 8002b4e:	e011      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f8f9 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d04d      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b88:	d108      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b96:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b9a:	e012      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ba2:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bba:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bca:	d106      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd6:	60d3      	str	r3, [r2, #12]
 8002bd8:	e020      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a02      	ldr	r2, [pc, #8]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bee:	60d3      	str	r3, [r2, #12]
 8002bf0:	e014      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2101      	movs	r1, #1
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f8a5 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d028      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c28:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c36:	4947      	ldr	r1, [pc, #284]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c48:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a41      	ldr	r2, [pc, #260]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c52:	60d3      	str	r3, [r2, #12]
 8002c54:	e011      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f876 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002c76:	7cfb      	ldrb	r3, [r7, #19]
 8002c78:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01e      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c86:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c96:	492f      	ldr	r1, [pc, #188]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f851 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cd0:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cd6:	f023 0204 	bic.w	r2, r3, #4
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce0:	491c      	ldr	r1, [pc, #112]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cf4:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfa:	f023 0218 	bic.w	r2, r3, #24
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	4913      	ldr	r1, [pc, #76]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d017      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d28:	490a      	ldr	r1, [pc, #40]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d48:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000

08002d58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d66:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00e      	beq.n	8002d90 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d72:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0203 	and.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d103      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
       ||
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d142      	bne.n	8002e10 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	e03f      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d018      	beq.n	8002dca <RCCEx_PLLSAI1_Config+0x72>
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d825      	bhi.n	8002de8 <RCCEx_PLLSAI1_Config+0x90>
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d002      	beq.n	8002da6 <RCCEx_PLLSAI1_Config+0x4e>
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d009      	beq.n	8002db8 <RCCEx_PLLSAI1_Config+0x60>
 8002da4:	e020      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002da6:	4b62      	ldr	r3, [pc, #392]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d11d      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db6:	e01a      	b.n	8002dee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db8:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d116      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc8:	e013      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dca:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dd6:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002de6:	e006      	b.n	8002df6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      break;
 8002dec:	e004      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002dee:	bf00      	nop
 8002df0:	e002      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002df6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4949      	ldr	r1, [pc, #292]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8086 	bne.w	8002f24 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e18:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a44      	ldr	r2, [pc, #272]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fe f9fc 	bl	8001220 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e2a:	e009      	b.n	8002e40 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e2c:	f7fe f9f8 	bl	8001220 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d902      	bls.n	8002e40 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e3e:	e005      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ef      	bne.n	8002e2c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d168      	bne.n	8002f24 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d113      	bne.n	8002e80 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e58:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6892      	ldr	r2, [r2, #8]
 8002e64:	0211      	lsls	r1, r2, #8
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	06d2      	lsls	r2, r2, #27
 8002e6c:	4311      	orrs	r1, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6852      	ldr	r2, [r2, #4]
 8002e72:	3a01      	subs	r2, #1
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	430a      	orrs	r2, r1
 8002e78:	492d      	ldr	r1, [pc, #180]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	610b      	str	r3, [r1, #16]
 8002e7e:	e02d      	b.n	8002edc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d115      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e86:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	0211      	lsls	r1, r2, #8
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6912      	ldr	r2, [r2, #16]
 8002e98:	0852      	lsrs	r2, r2, #1
 8002e9a:	3a01      	subs	r2, #1
 8002e9c:	0552      	lsls	r2, r2, #21
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6852      	ldr	r2, [r2, #4]
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	4921      	ldr	r1, [pc, #132]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	610b      	str	r3, [r1, #16]
 8002eb0:	e014      	b.n	8002edc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6892      	ldr	r2, [r2, #8]
 8002ebe:	0211      	lsls	r1, r2, #8
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6952      	ldr	r2, [r2, #20]
 8002ec4:	0852      	lsrs	r2, r2, #1
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0652      	lsls	r2, r2, #25
 8002eca:	4311      	orrs	r1, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6852      	ldr	r2, [r2, #4]
 8002ed0:	3a01      	subs	r2, #1
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	4916      	ldr	r1, [pc, #88]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ee2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe f99a 	bl	8001220 <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eee:	e009      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ef0:	f7fe f996 	bl	8001220 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d902      	bls.n	8002f04 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	73fb      	strb	r3, [r7, #15]
          break;
 8002f02:	e005      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ef      	beq.n	8002ef0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	4904      	ldr	r1, [pc, #16]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	07ff800f 	.word	0x07ff800f
 8002f38:	ff9f800f 	.word	0xff9f800f
 8002f3c:	f9ff800f 	.word	0xf9ff800f

08002f40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f4e:	4b72      	ldr	r3, [pc, #456]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00e      	beq.n	8002f78 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f5a:	4b6f      	ldr	r3, [pc, #444]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0203 	and.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d103      	bne.n	8002f72 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d142      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	e03f      	b.n	8002ff8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d018      	beq.n	8002fb2 <RCCEx_PLLSAI2_Config+0x72>
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d825      	bhi.n	8002fd0 <RCCEx_PLLSAI2_Config+0x90>
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d002      	beq.n	8002f8e <RCCEx_PLLSAI2_Config+0x4e>
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d009      	beq.n	8002fa0 <RCCEx_PLLSAI2_Config+0x60>
 8002f8c:	e020      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f8e:	4b62      	ldr	r3, [pc, #392]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11d      	bne.n	8002fd6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9e:	e01a      	b.n	8002fd6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fa0:	4b5d      	ldr	r3, [pc, #372]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d116      	bne.n	8002fda <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb0:	e013      	b.n	8002fda <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fb2:	4b59      	ldr	r3, [pc, #356]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fbe:	4b56      	ldr	r3, [pc, #344]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fce:	e006      	b.n	8002fde <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e004      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e002      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002fde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4949      	ldr	r1, [pc, #292]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 8086 	bne.w	800310c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003000:	4b45      	ldr	r3, [pc, #276]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a44      	ldr	r2, [pc, #272]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe f908 	bl	8001220 <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003012:	e009      	b.n	8003028 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003014:	f7fe f904 	bl	8001220 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d902      	bls.n	8003028 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	73fb      	strb	r3, [r7, #15]
        break;
 8003026:	e005      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003028:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ef      	bne.n	8003014 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d168      	bne.n	800310c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d113      	bne.n	8003068 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003040:	4b35      	ldr	r3, [pc, #212]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	4b35      	ldr	r3, [pc, #212]	; (800311c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	0211      	lsls	r1, r2, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68d2      	ldr	r2, [r2, #12]
 8003052:	06d2      	lsls	r2, r2, #27
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6852      	ldr	r2, [r2, #4]
 800305a:	3a01      	subs	r2, #1
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	430a      	orrs	r2, r1
 8003060:	492d      	ldr	r1, [pc, #180]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	614b      	str	r3, [r1, #20]
 8003066:	e02d      	b.n	80030c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d115      	bne.n	800309a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6892      	ldr	r2, [r2, #8]
 800307a:	0211      	lsls	r1, r2, #8
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6912      	ldr	r2, [r2, #16]
 8003080:	0852      	lsrs	r2, r2, #1
 8003082:	3a01      	subs	r2, #1
 8003084:	0552      	lsls	r2, r2, #21
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6852      	ldr	r2, [r2, #4]
 800308c:	3a01      	subs	r2, #1
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	430a      	orrs	r2, r1
 8003092:	4921      	ldr	r1, [pc, #132]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	614b      	str	r3, [r1, #20]
 8003098:	e014      	b.n	80030c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <RCCEx_PLLSAI2_Config+0x1e4>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6892      	ldr	r2, [r2, #8]
 80030a6:	0211      	lsls	r1, r2, #8
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6952      	ldr	r2, [r2, #20]
 80030ac:	0852      	lsrs	r2, r2, #1
 80030ae:	3a01      	subs	r2, #1
 80030b0:	0652      	lsls	r2, r2, #25
 80030b2:	4311      	orrs	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6852      	ldr	r2, [r2, #4]
 80030b8:	3a01      	subs	r2, #1
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	430a      	orrs	r2, r1
 80030be:	4916      	ldr	r1, [pc, #88]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe f8a6 	bl	8001220 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030d6:	e009      	b.n	80030ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030d8:	f7fe f8a2 	bl	8001220 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	73fb      	strb	r3, [r7, #15]
          break;
 80030ea:	e005      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ef      	beq.n	80030d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	4904      	ldr	r1, [pc, #16]	; (8003118 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003108:	4313      	orrs	r3, r2
 800310a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	07ff800f 	.word	0x07ff800f
 8003120:	ff9f800f 	.word	0xff9f800f
 8003124:	f9ff800f 	.word	0xf9ff800f

08003128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e049      	b.n	80031ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fe5c 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f000 fb7a 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e049      	b.n	800327c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f841 	bl	8003284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 fb23 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_TIM_PWM_Start+0x24>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e03c      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d109      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x3e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e02f      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d109      	bne.n	80032f0 <HAL_TIM_PWM_Start+0x58>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e022      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d109      	bne.n	800330a <HAL_TIM_PWM_Start+0x72>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e015      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d109      	bne.n	8003324 <HAL_TIM_PWM_Start+0x8c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e008      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e09c      	b.n	8003478 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0xb6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	e023      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0xc6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	e01b      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0xd6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800336c:	e013      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0xe6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800337c:	e00b      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b10      	cmp	r3, #16
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0xf6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800338c:	e003      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fe68 	bl	8004074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a35      	ldr	r2, [pc, #212]	; (8003480 <HAL_TIM_PWM_Start+0x1e8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x13e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a34      	ldr	r2, [pc, #208]	; (8003484 <HAL_TIM_PWM_Start+0x1ec>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x13e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a32      	ldr	r2, [pc, #200]	; (8003488 <HAL_TIM_PWM_Start+0x1f0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x13e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a31      	ldr	r2, [pc, #196]	; (800348c <HAL_TIM_PWM_Start+0x1f4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x13e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a2f      	ldr	r2, [pc, #188]	; (8003490 <HAL_TIM_PWM_Start+0x1f8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_TIM_PWM_Start+0x142>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_TIM_PWM_Start+0x144>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_TIM_PWM_Start+0x1e8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01d      	beq.n	8003436 <HAL_TIM_PWM_Start+0x19e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d018      	beq.n	8003436 <HAL_TIM_PWM_Start+0x19e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a22      	ldr	r2, [pc, #136]	; (8003494 <HAL_TIM_PWM_Start+0x1fc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <HAL_TIM_PWM_Start+0x19e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a21      	ldr	r2, [pc, #132]	; (8003498 <HAL_TIM_PWM_Start+0x200>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00e      	beq.n	8003436 <HAL_TIM_PWM_Start+0x19e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1f      	ldr	r2, [pc, #124]	; (800349c <HAL_TIM_PWM_Start+0x204>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d009      	beq.n	8003436 <HAL_TIM_PWM_Start+0x19e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a17      	ldr	r2, [pc, #92]	; (8003484 <HAL_TIM_PWM_Start+0x1ec>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d004      	beq.n	8003436 <HAL_TIM_PWM_Start+0x19e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <HAL_TIM_PWM_Start+0x1f0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d115      	bne.n	8003462 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <HAL_TIM_PWM_Start+0x208>)
 800343e:	4013      	ands	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b06      	cmp	r3, #6
 8003446:	d015      	beq.n	8003474 <HAL_TIM_PWM_Start+0x1dc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344e:	d011      	beq.n	8003474 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003460:	e008      	b.n	8003474 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e000      	b.n	8003476 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40013400 	.word	0x40013400
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	00010007 	.word	0x00010007

080034a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034be:	2302      	movs	r3, #2
 80034c0:	e0ff      	b.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b14      	cmp	r3, #20
 80034ce:	f200 80f0 	bhi.w	80036b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	0800352d 	.word	0x0800352d
 80034dc:	080036b3 	.word	0x080036b3
 80034e0:	080036b3 	.word	0x080036b3
 80034e4:	080036b3 	.word	0x080036b3
 80034e8:	0800356d 	.word	0x0800356d
 80034ec:	080036b3 	.word	0x080036b3
 80034f0:	080036b3 	.word	0x080036b3
 80034f4:	080036b3 	.word	0x080036b3
 80034f8:	080035af 	.word	0x080035af
 80034fc:	080036b3 	.word	0x080036b3
 8003500:	080036b3 	.word	0x080036b3
 8003504:	080036b3 	.word	0x080036b3
 8003508:	080035ef 	.word	0x080035ef
 800350c:	080036b3 	.word	0x080036b3
 8003510:	080036b3 	.word	0x080036b3
 8003514:	080036b3 	.word	0x080036b3
 8003518:	08003631 	.word	0x08003631
 800351c:	080036b3 	.word	0x080036b3
 8003520:	080036b3 	.word	0x080036b3
 8003524:	080036b3 	.word	0x080036b3
 8003528:	08003671 	.word	0x08003671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fa2e 	bl	8003994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	619a      	str	r2, [r3, #24]
      break;
 800356a:	e0a5      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fa9e 	bl	8003ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	619a      	str	r2, [r3, #24]
      break;
 80035ac:	e084      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fb07 	bl	8003bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0208 	orr.w	r2, r2, #8
 80035c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0204 	bic.w	r2, r2, #4
 80035d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
      break;
 80035ec:	e064      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fb6f 	bl	8003cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	61da      	str	r2, [r3, #28]
      break;
 800362e:	e043      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fbb8 	bl	8003dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800366e:	e023      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fbfc 	bl	8003e74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036b0:	e002      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
      break;
 80036b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0b6      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x18a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800370a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003724:	d03e      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0xd8>
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	f200 8087 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x170>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	f000 8086 	beq.w	8003842 <HAL_TIM_ConfigClockSource+0x176>
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373a:	d87f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x170>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d01a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0xaa>
 8003740:	2b70      	cmp	r3, #112	; 0x70
 8003742:	d87b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x170>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d050      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x11e>
 8003748:	2b60      	cmp	r3, #96	; 0x60
 800374a:	d877      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x170>
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d03c      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xfe>
 8003750:	2b50      	cmp	r3, #80	; 0x50
 8003752:	d873      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x170>
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d058      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x13e>
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d86f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x170>
 800375c:	2b30      	cmp	r3, #48	; 0x30
 800375e:	d064      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15e>
 8003760:	2b30      	cmp	r3, #48	; 0x30
 8003762:	d86b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x170>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d060      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15e>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d867      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x170>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15e>
 8003770:	2b10      	cmp	r3, #16
 8003772:	d05a      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15e>
 8003774:	e062      	b.n	800383c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f000 fc55 	bl	8004034 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	609a      	str	r2, [r3, #8]
      break;
 80037a2:	e04f      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f000 fc3e 	bl	8004034 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c6:	609a      	str	r2, [r3, #8]
      break;
 80037c8:	e03c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 fbb2 	bl	8003f40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2150      	movs	r1, #80	; 0x50
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fc0b 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 80037e8:	e02c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 fbd1 	bl	8003f9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2160      	movs	r1, #96	; 0x60
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fbfb 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 8003808:	e01c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	461a      	mov	r2, r3
 8003818:	f000 fb92 	bl	8003f40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2140      	movs	r1, #64	; 0x40
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fbeb 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 8003828:	e00c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 fbe2 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 800383a:	e003      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e000      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	; (8003974 <TIM_Base_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <TIM_Base_SetConfig+0x118>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3c      	ldr	r2, [pc, #240]	; (800397c <TIM_Base_SetConfig+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <TIM_Base_SetConfig+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <TIM_Base_SetConfig+0x124>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <TIM_Base_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d01b      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <TIM_Base_SetConfig+0x118>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d017      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2b      	ldr	r2, [pc, #172]	; (800397c <TIM_Base_SetConfig+0x11c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <TIM_Base_SetConfig+0x120>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00f      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <TIM_Base_SetConfig+0x124>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <TIM_Base_SetConfig+0x128>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <TIM_Base_SetConfig+0x12c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <TIM_Base_SetConfig+0x130>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a10      	ldr	r2, [pc, #64]	; (8003974 <TIM_Base_SetConfig+0x114>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00f      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <TIM_Base_SetConfig+0x124>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00b      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a11      	ldr	r2, [pc, #68]	; (8003988 <TIM_Base_SetConfig+0x128>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d007      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <TIM_Base_SetConfig+0x12c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0f      	ldr	r2, [pc, #60]	; (8003990 <TIM_Base_SetConfig+0x130>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40013400 	.word	0x40013400
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800

08003994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 0302 	bic.w	r3, r3, #2
 80039e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <TIM_OC1_SetConfig+0x10c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00f      	beq.n	8003a14 <TIM_OC1_SetConfig+0x80>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a2b      	ldr	r2, [pc, #172]	; (8003aa4 <TIM_OC1_SetConfig+0x110>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <TIM_OC1_SetConfig+0x80>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <TIM_OC1_SetConfig+0x114>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <TIM_OC1_SetConfig+0x80>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <TIM_OC1_SetConfig+0x118>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC1_SetConfig+0x80>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a28      	ldr	r2, [pc, #160]	; (8003ab0 <TIM_OC1_SetConfig+0x11c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10c      	bne.n	8003a2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <TIM_OC1_SetConfig+0x10c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_OC1_SetConfig+0xc2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <TIM_OC1_SetConfig+0x110>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_OC1_SetConfig+0xc2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <TIM_OC1_SetConfig+0x114>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_OC1_SetConfig+0xc2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a18      	ldr	r2, [pc, #96]	; (8003aac <TIM_OC1_SetConfig+0x118>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_OC1_SetConfig+0xc2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <TIM_OC1_SetConfig+0x11c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40013400 	.word	0x40013400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800

08003ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f023 0210 	bic.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0320 	bic.w	r3, r3, #32
 8003b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <TIM_OC2_SetConfig+0x100>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_OC2_SetConfig+0x6c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <TIM_OC2_SetConfig+0x104>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10d      	bne.n	8003b3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <TIM_OC2_SetConfig+0x100>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00f      	beq.n	8003b64 <TIM_OC2_SetConfig+0xb0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <TIM_OC2_SetConfig+0x104>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_OC2_SetConfig+0xb0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <TIM_OC2_SetConfig+0x108>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_OC2_SetConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <TIM_OC2_SetConfig+0x10c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC2_SetConfig+0xb0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <TIM_OC2_SetConfig+0x110>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d113      	bne.n	8003b8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40013400 	.word	0x40013400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800

08003bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <TIM_OC3_SetConfig+0xfc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_OC3_SetConfig+0x6a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a26      	ldr	r2, [pc, #152]	; (8003cc8 <TIM_OC3_SetConfig+0x100>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10d      	bne.n	8003c4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <TIM_OC3_SetConfig+0xfc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <TIM_OC3_SetConfig+0xae>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <TIM_OC3_SetConfig+0x100>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_OC3_SetConfig+0xae>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <TIM_OC3_SetConfig+0x104>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_OC3_SetConfig+0xae>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <TIM_OC3_SetConfig+0x108>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC3_SetConfig+0xae>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <TIM_OC3_SetConfig+0x10c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d113      	bne.n	8003c9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40013400 	.word	0x40013400
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40014400 	.word	0x40014400
 8003cd4:	40014800 	.word	0x40014800

08003cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	031b      	lsls	r3, r3, #12
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <TIM_OC4_SetConfig+0xc0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00f      	beq.n	8003d5c <TIM_OC4_SetConfig+0x84>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <TIM_OC4_SetConfig+0xc4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <TIM_OC4_SetConfig+0x84>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <TIM_OC4_SetConfig+0xc8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <TIM_OC4_SetConfig+0x84>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <TIM_OC4_SetConfig+0xcc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_OC4_SetConfig+0x84>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a14      	ldr	r2, [pc, #80]	; (8003da8 <TIM_OC4_SetConfig+0xd0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d109      	bne.n	8003d70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	019b      	lsls	r3, r3, #6
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40013400 	.word	0x40013400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40014400 	.word	0x40014400
 8003da8:	40014800 	.word	0x40014800

08003dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <TIM_OC5_SetConfig+0xb4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00f      	beq.n	8003e26 <TIM_OC5_SetConfig+0x7a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <TIM_OC5_SetConfig+0xb8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_OC5_SetConfig+0x7a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <TIM_OC5_SetConfig+0xbc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_OC5_SetConfig+0x7a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <TIM_OC5_SetConfig+0xc0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_OC5_SetConfig+0x7a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <TIM_OC5_SetConfig+0xc4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d109      	bne.n	8003e3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40013400 	.word	0x40013400
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800

08003e74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	051b      	lsls	r3, r3, #20
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <TIM_OC6_SetConfig+0xb8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <TIM_OC6_SetConfig+0x7c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <TIM_OC6_SetConfig+0xbc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_OC6_SetConfig+0x7c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <TIM_OC6_SetConfig+0xc0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_OC6_SetConfig+0x7c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <TIM_OC6_SetConfig+0xc4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC6_SetConfig+0x7c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <TIM_OC6_SetConfig+0xc8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d109      	bne.n	8003f04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	029b      	lsls	r3, r3, #10
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800

08003f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 030a 	bic.w	r3, r3, #10
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f023 0210 	bic.w	r2, r3, #16
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	031b      	lsls	r3, r3, #12
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	f043 0307 	orr.w	r3, r3, #7
 8004020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	609a      	str	r2, [r3, #8]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800404e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	431a      	orrs	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4313      	orrs	r3, r2
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	2201      	movs	r2, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	43db      	mvns	r3, r3
 8004096:	401a      	ands	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e068      	b.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2e      	ldr	r2, [pc, #184]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2d      	ldr	r2, [pc, #180]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d108      	bne.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004112:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01d      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d018      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a13      	ldr	r2, [pc, #76]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10c      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004184:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	4313      	orrs	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40013400 	.word	0x40013400
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40014000 	.word	0x40014000

080041d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e042      	b.n	8004268 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fc fea3 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2224      	movs	r2, #36	; 0x24
 80041fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f998 	bl	8004548 <UART_SetConfig>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e022      	b.n	8004268 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fc88 	bl	8004b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800423e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800424e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fd0f 	bl	8004c84 <UART_CheckIdleState>
 8004266:	4603      	mov	r3, r0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004286:	2b20      	cmp	r3, #32
 8004288:	f040 8084 	bne.w	8004394 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_UART_Transmit+0x28>
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e07c      	b.n	8004396 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Transmit+0x3a>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e075      	b.n	8004396 <HAL_UART_Transmit+0x126>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2221      	movs	r2, #33	; 0x21
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c2:	f7fc ffad 	bl	8001220 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d108      	bne.n	80042f4 <HAL_UART_Transmit+0x84>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e003      	b.n	80042fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004304:	e02d      	b.n	8004362 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fd02 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e03a      	b.n	8004396 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004332:	b292      	uxth	r2, r2
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	3302      	adds	r3, #2
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	e008      	b.n	8004350 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b292      	uxth	r2, r2
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1cb      	bne.n	8004306 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2140      	movs	r1, #64	; 0x40
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fcce 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e006      	b.n	8004396 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b08a      	sub	sp, #40	; 0x28
 80043a2:	af02      	add	r7, sp, #8
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	f040 80c1 	bne.w	800453c <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_UART_Receive+0x28>
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0b9      	b.n	800453e <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_UART_Receive+0x3a>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0b2      	b.n	800453e <HAL_UART_Receive+0x1a0>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2222      	movs	r2, #34	; 0x22
 80043ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043f6:	f7fc ff13 	bl	8001220 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004414:	d10e      	bne.n	8004434 <HAL_UART_Receive+0x96>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <HAL_UART_Receive+0x8c>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004424:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004428:	e02d      	b.n	8004486 <HAL_UART_Receive+0xe8>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004432:	e028      	b.n	8004486 <HAL_UART_Receive+0xe8>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10d      	bne.n	8004458 <HAL_UART_Receive+0xba>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <HAL_UART_Receive+0xb0>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	22ff      	movs	r2, #255	; 0xff
 8004448:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800444c:	e01b      	b.n	8004486 <HAL_UART_Receive+0xe8>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	227f      	movs	r2, #127	; 0x7f
 8004452:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004456:	e016      	b.n	8004486 <HAL_UART_Receive+0xe8>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004460:	d10d      	bne.n	800447e <HAL_UART_Receive+0xe0>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <HAL_UART_Receive+0xd6>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	227f      	movs	r2, #127	; 0x7f
 800446e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004472:	e008      	b.n	8004486 <HAL_UART_Receive+0xe8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	223f      	movs	r2, #63	; 0x3f
 8004478:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800447c:	e003      	b.n	8004486 <HAL_UART_Receive+0xe8>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800448c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004496:	d108      	bne.n	80044aa <HAL_UART_Receive+0x10c>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e003      	b.n	80044b2 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044ba:	e033      	b.n	8004524 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2200      	movs	r2, #0
 80044c4:	2120      	movs	r1, #32
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fc27 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e033      	b.n	800453e <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10c      	bne.n	80044f6 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	8a7b      	ldrh	r3, [r7, #18]
 80044e6:	4013      	ands	r3, r2
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3302      	adds	r3, #2
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e00d      	b.n	8004512 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	8a7b      	ldrh	r3, [r7, #18]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4013      	ands	r3, r2
 8004506:	b2da      	uxtb	r2, r3
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	3301      	adds	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1c5      	bne.n	80044bc <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800454c:	b08c      	sub	sp, #48	; 0x30
 800454e:	af00      	add	r7, sp, #0
 8004550:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	431a      	orrs	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4baa      	ldr	r3, [pc, #680]	; (8004820 <UART_SetConfig+0x2d8>)
 8004578:	4013      	ands	r3, r2
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004580:	430b      	orrs	r3, r1
 8004582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a9f      	ldr	r2, [pc, #636]	; (8004824 <UART_SetConfig+0x2dc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80045be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f023 010f 	bic.w	r1, r3, #15
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a90      	ldr	r2, [pc, #576]	; (8004828 <UART_SetConfig+0x2e0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d125      	bne.n	8004638 <UART_SetConfig+0xf0>
 80045ec:	4b8f      	ldr	r3, [pc, #572]	; (800482c <UART_SetConfig+0x2e4>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d81a      	bhi.n	8004630 <UART_SetConfig+0xe8>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0xb8>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004611 	.word	0x08004611
 8004604:	08004621 	.word	0x08004621
 8004608:	08004619 	.word	0x08004619
 800460c:	08004629 	.word	0x08004629
 8004610:	2301      	movs	r3, #1
 8004612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004616:	e116      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004618:	2302      	movs	r3, #2
 800461a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461e:	e112      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004620:	2304      	movs	r3, #4
 8004622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004626:	e10e      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004628:	2308      	movs	r3, #8
 800462a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462e:	e10a      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004630:	2310      	movs	r3, #16
 8004632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004636:	e106      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a7c      	ldr	r2, [pc, #496]	; (8004830 <UART_SetConfig+0x2e8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d138      	bne.n	80046b4 <UART_SetConfig+0x16c>
 8004642:	4b7a      	ldr	r3, [pc, #488]	; (800482c <UART_SetConfig+0x2e4>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d82d      	bhi.n	80046ac <UART_SetConfig+0x164>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0x110>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800468d 	.word	0x0800468d
 800465c:	080046ad 	.word	0x080046ad
 8004660:	080046ad 	.word	0x080046ad
 8004664:	080046ad 	.word	0x080046ad
 8004668:	0800469d 	.word	0x0800469d
 800466c:	080046ad 	.word	0x080046ad
 8004670:	080046ad 	.word	0x080046ad
 8004674:	080046ad 	.word	0x080046ad
 8004678:	08004695 	.word	0x08004695
 800467c:	080046ad 	.word	0x080046ad
 8004680:	080046ad 	.word	0x080046ad
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046a5 	.word	0x080046a5
 800468c:	2300      	movs	r3, #0
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004692:	e0d8      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004694:	2302      	movs	r3, #2
 8004696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469a:	e0d4      	b.n	8004846 <UART_SetConfig+0x2fe>
 800469c:	2304      	movs	r3, #4
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a2:	e0d0      	b.n	8004846 <UART_SetConfig+0x2fe>
 80046a4:	2308      	movs	r3, #8
 80046a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046aa:	e0cc      	b.n	8004846 <UART_SetConfig+0x2fe>
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b2:	e0c8      	b.n	8004846 <UART_SetConfig+0x2fe>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5e      	ldr	r2, [pc, #376]	; (8004834 <UART_SetConfig+0x2ec>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d125      	bne.n	800470a <UART_SetConfig+0x1c2>
 80046be:	4b5b      	ldr	r3, [pc, #364]	; (800482c <UART_SetConfig+0x2e4>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d016      	beq.n	80046fa <UART_SetConfig+0x1b2>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d818      	bhi.n	8004702 <UART_SetConfig+0x1ba>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d00a      	beq.n	80046ea <UART_SetConfig+0x1a2>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d814      	bhi.n	8004702 <UART_SetConfig+0x1ba>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <UART_SetConfig+0x19a>
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d008      	beq.n	80046f2 <UART_SetConfig+0x1aa>
 80046e0:	e00f      	b.n	8004702 <UART_SetConfig+0x1ba>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e8:	e0ad      	b.n	8004846 <UART_SetConfig+0x2fe>
 80046ea:	2302      	movs	r3, #2
 80046ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f0:	e0a9      	b.n	8004846 <UART_SetConfig+0x2fe>
 80046f2:	2304      	movs	r3, #4
 80046f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f8:	e0a5      	b.n	8004846 <UART_SetConfig+0x2fe>
 80046fa:	2308      	movs	r3, #8
 80046fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004700:	e0a1      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004702:	2310      	movs	r3, #16
 8004704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004708:	e09d      	b.n	8004846 <UART_SetConfig+0x2fe>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <UART_SetConfig+0x2f0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d125      	bne.n	8004760 <UART_SetConfig+0x218>
 8004714:	4b45      	ldr	r3, [pc, #276]	; (800482c <UART_SetConfig+0x2e4>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800471e:	2bc0      	cmp	r3, #192	; 0xc0
 8004720:	d016      	beq.n	8004750 <UART_SetConfig+0x208>
 8004722:	2bc0      	cmp	r3, #192	; 0xc0
 8004724:	d818      	bhi.n	8004758 <UART_SetConfig+0x210>
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d00a      	beq.n	8004740 <UART_SetConfig+0x1f8>
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d814      	bhi.n	8004758 <UART_SetConfig+0x210>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <UART_SetConfig+0x1f0>
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d008      	beq.n	8004748 <UART_SetConfig+0x200>
 8004736:	e00f      	b.n	8004758 <UART_SetConfig+0x210>
 8004738:	2300      	movs	r3, #0
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473e:	e082      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004740:	2302      	movs	r3, #2
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004746:	e07e      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004748:	2304      	movs	r3, #4
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474e:	e07a      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004750:	2308      	movs	r3, #8
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004756:	e076      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004758:	2310      	movs	r3, #16
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475e:	e072      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a35      	ldr	r2, [pc, #212]	; (800483c <UART_SetConfig+0x2f4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d12a      	bne.n	80047c0 <UART_SetConfig+0x278>
 800476a:	4b30      	ldr	r3, [pc, #192]	; (800482c <UART_SetConfig+0x2e4>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004778:	d01a      	beq.n	80047b0 <UART_SetConfig+0x268>
 800477a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800477e:	d81b      	bhi.n	80047b8 <UART_SetConfig+0x270>
 8004780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004784:	d00c      	beq.n	80047a0 <UART_SetConfig+0x258>
 8004786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800478a:	d815      	bhi.n	80047b8 <UART_SetConfig+0x270>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <UART_SetConfig+0x250>
 8004790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004794:	d008      	beq.n	80047a8 <UART_SetConfig+0x260>
 8004796:	e00f      	b.n	80047b8 <UART_SetConfig+0x270>
 8004798:	2300      	movs	r3, #0
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479e:	e052      	b.n	8004846 <UART_SetConfig+0x2fe>
 80047a0:	2302      	movs	r3, #2
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a6:	e04e      	b.n	8004846 <UART_SetConfig+0x2fe>
 80047a8:	2304      	movs	r3, #4
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ae:	e04a      	b.n	8004846 <UART_SetConfig+0x2fe>
 80047b0:	2308      	movs	r3, #8
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b6:	e046      	b.n	8004846 <UART_SetConfig+0x2fe>
 80047b8:	2310      	movs	r3, #16
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047be:	e042      	b.n	8004846 <UART_SetConfig+0x2fe>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <UART_SetConfig+0x2dc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d13a      	bne.n	8004840 <UART_SetConfig+0x2f8>
 80047ca:	4b18      	ldr	r3, [pc, #96]	; (800482c <UART_SetConfig+0x2e4>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047d8:	d01a      	beq.n	8004810 <UART_SetConfig+0x2c8>
 80047da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047de:	d81b      	bhi.n	8004818 <UART_SetConfig+0x2d0>
 80047e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e4:	d00c      	beq.n	8004800 <UART_SetConfig+0x2b8>
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	d815      	bhi.n	8004818 <UART_SetConfig+0x2d0>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <UART_SetConfig+0x2b0>
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d008      	beq.n	8004808 <UART_SetConfig+0x2c0>
 80047f6:	e00f      	b.n	8004818 <UART_SetConfig+0x2d0>
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fe:	e022      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004800:	2302      	movs	r3, #2
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004806:	e01e      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480e:	e01a      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004816:	e016      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800481e:	e012      	b.n	8004846 <UART_SetConfig+0x2fe>
 8004820:	cfff69f3 	.word	0xcfff69f3
 8004824:	40008000 	.word	0x40008000
 8004828:	40013800 	.word	0x40013800
 800482c:	40021000 	.word	0x40021000
 8004830:	40004400 	.word	0x40004400
 8004834:	40004800 	.word	0x40004800
 8004838:	40004c00 	.word	0x40004c00
 800483c:	40005000 	.word	0x40005000
 8004840:	2310      	movs	r3, #16
 8004842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4aae      	ldr	r2, [pc, #696]	; (8004b04 <UART_SetConfig+0x5bc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	f040 8097 	bne.w	8004980 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004856:	2b08      	cmp	r3, #8
 8004858:	d823      	bhi.n	80048a2 <UART_SetConfig+0x35a>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x318>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004885 	.word	0x08004885
 8004864:	080048a3 	.word	0x080048a3
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048a3 	.word	0x080048a3
 8004870:	08004893 	.word	0x08004893
 8004874:	080048a3 	.word	0x080048a3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048a3 	.word	0x080048a3
 8004880:	0800489b 	.word	0x0800489b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fd fe4c 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8004888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800488a:	e010      	b.n	80048ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488c:	4b9e      	ldr	r3, [pc, #632]	; (8004b08 <UART_SetConfig+0x5c0>)
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004890:	e00d      	b.n	80048ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004892:	f7fd fdad 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8004896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004898:	e009      	b.n	80048ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048a0:	e005      	b.n	80048ae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8130 	beq.w	8004b16 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	4a94      	ldr	r2, [pc, #592]	; (8004b0c <UART_SetConfig+0x5c4>)
 80048bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048c0:	461a      	mov	r2, r3
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d305      	bcc.n	80048e6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d903      	bls.n	80048ee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048ec:	e113      	b.n	8004b16 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	2200      	movs	r2, #0
 80048f2:	60bb      	str	r3, [r7, #8]
 80048f4:	60fa      	str	r2, [r7, #12]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	4a84      	ldr	r2, [pc, #528]	; (8004b0c <UART_SetConfig+0x5c4>)
 80048fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004900:	b29b      	uxth	r3, r3
 8004902:	2200      	movs	r2, #0
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800490c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004910:	f7fb fc74 	bl	80001fc <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	020b      	lsls	r3, r1, #8
 8004926:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800492a:	0202      	lsls	r2, r0, #8
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	6849      	ldr	r1, [r1, #4]
 8004930:	0849      	lsrs	r1, r1, #1
 8004932:	2000      	movs	r0, #0
 8004934:	460c      	mov	r4, r1
 8004936:	4605      	mov	r5, r0
 8004938:	eb12 0804 	adds.w	r8, r2, r4
 800493c:	eb43 0905 	adc.w	r9, r3, r5
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	469a      	mov	sl, r3
 8004948:	4693      	mov	fp, r2
 800494a:	4652      	mov	r2, sl
 800494c:	465b      	mov	r3, fp
 800494e:	4640      	mov	r0, r8
 8004950:	4649      	mov	r1, r9
 8004952:	f7fb fc53 	bl	80001fc <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4613      	mov	r3, r2
 800495c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004964:	d308      	bcc.n	8004978 <UART_SetConfig+0x430>
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496c:	d204      	bcs.n	8004978 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	e0ce      	b.n	8004b16 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800497e:	e0ca      	b.n	8004b16 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004988:	d166      	bne.n	8004a58 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800498a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800498e:	2b08      	cmp	r3, #8
 8004990:	d827      	bhi.n	80049e2 <UART_SetConfig+0x49a>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x450>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049d3 	.word	0x080049d3
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049e3 	.word	0x080049e3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7fd fdb0 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 80049c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049c2:	e014      	b.n	80049ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7fd fdc2 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ca:	e010      	b.n	80049ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b4e      	ldr	r3, [pc, #312]	; (8004b08 <UART_SetConfig+0x5c0>)
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049d0:	e00d      	b.n	80049ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7fd fd0d 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80049d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049d8:	e009      	b.n	80049ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049e0:	e005      	b.n	80049ee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8090 	beq.w	8004b16 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	4a44      	ldr	r2, [pc, #272]	; (8004b0c <UART_SetConfig+0x5c4>)
 80049fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a08:	005a      	lsls	r2, r3, #1
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	441a      	add	r2, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d916      	bls.n	8004a50 <UART_SetConfig+0x508>
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d212      	bcs.n	8004a50 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f023 030f 	bic.w	r3, r3, #15
 8004a32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	8bfb      	ldrh	r3, [r7, #30]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	8bfa      	ldrh	r2, [r7, #30]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e062      	b.n	8004b16 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a56:	e05e      	b.n	8004b16 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d828      	bhi.n	8004ab2 <UART_SetConfig+0x56a>
 8004a60:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x520>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fd fd48 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8004a90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a92:	e014      	b.n	8004abe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fd fd5a 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a9a:	e010      	b.n	8004abe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <UART_SetConfig+0x5c0>)
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fd fca5 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8004aa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aa8:	e009      	b.n	8004abe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ab0:	e005      	b.n	8004abe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004abc:	bf00      	nop
    }

    if (pclk != 0U)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d028      	beq.n	8004b16 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <UART_SetConfig+0x5c4>)
 8004aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	441a      	add	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	d910      	bls.n	8004b10 <UART_SetConfig+0x5c8>
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af4:	d20c      	bcs.n	8004b10 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e009      	b.n	8004b16 <UART_SetConfig+0x5ce>
 8004b02:	bf00      	nop
 8004b04:	40008000 	.word	0x40008000
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	08005168 	.word	0x08005168
      }
      else
      {
        ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3730      	adds	r7, #48	; 0x30
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3e:	d10a      	bne.n	8004c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c94:	f7fc fac4 	bl	8001220 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d10e      	bne.n	8004cc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f82f 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e025      	b.n	8004d12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d10e      	bne.n	8004cf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f819 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e00f      	b.n	8004d12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b09c      	sub	sp, #112	; 0x70
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	e0a9      	b.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	f000 80a5 	beq.w	8004e80 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fc fa73 	bl	8001220 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x32>
 8004d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d140      	bne.n	8004dce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d60:	667b      	str	r3, [r7, #100]	; 0x64
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e6      	bne.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3308      	adds	r3, #8
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e069      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d051      	beq.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dea:	d149      	bne.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
 8004e16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e6      	bne.n	8004df6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	613b      	str	r3, [r7, #16]
   return(result);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e48:	623a      	str	r2, [r7, #32]
 8004e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	69f9      	ldr	r1, [r7, #28]
 8004e4e:	6a3a      	ldr	r2, [r7, #32]
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e010      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	f43f af46 	beq.w	8004d2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3770      	adds	r7, #112	; 0x70
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e027      	b.n	8004f10 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2224      	movs	r2, #36	; 0x24
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004eee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e02d      	b.n	8004f90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2224      	movs	r2, #36	; 0x24
 8004f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f84f 	bl	8005014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e02d      	b.n	800500c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f811 	bl	8005014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005020:	2b00      	cmp	r3, #0
 8005022:	d108      	bne.n	8005036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005034:	e031      	b.n	800509a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005036:	2308      	movs	r3, #8
 8005038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800503a:	2308      	movs	r3, #8
 800503c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	0e5b      	lsrs	r3, r3, #25
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	0f5b      	lsrs	r3, r3, #29
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800505e:	7bbb      	ldrb	r3, [r7, #14]
 8005060:	7b3a      	ldrb	r2, [r7, #12]
 8005062:	4911      	ldr	r1, [pc, #68]	; (80050a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005064:	5c8a      	ldrb	r2, [r1, r2]
 8005066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800506a:	7b3a      	ldrb	r2, [r7, #12]
 800506c:	490f      	ldr	r1, [pc, #60]	; (80050ac <UARTEx_SetNbDataToProcess+0x98>)
 800506e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005070:	fb93 f3f2 	sdiv	r3, r3, r2
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	7b7a      	ldrb	r2, [r7, #13]
 8005080:	4909      	ldr	r1, [pc, #36]	; (80050a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005082:	5c8a      	ldrb	r2, [r1, r2]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005088:	7b7a      	ldrb	r2, [r7, #13]
 800508a:	4908      	ldr	r1, [pc, #32]	; (80050ac <UARTEx_SetNbDataToProcess+0x98>)
 800508c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800508e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	08005180 	.word	0x08005180
 80050ac:	08005188 	.word	0x08005188

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4d0d      	ldr	r5, [pc, #52]	; (80050e8 <__libc_init_array+0x38>)
 80050b4:	4c0d      	ldr	r4, [pc, #52]	; (80050ec <__libc_init_array+0x3c>)
 80050b6:	1b64      	subs	r4, r4, r5
 80050b8:	10a4      	asrs	r4, r4, #2
 80050ba:	2600      	movs	r6, #0
 80050bc:	42a6      	cmp	r6, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	4d0b      	ldr	r5, [pc, #44]	; (80050f0 <__libc_init_array+0x40>)
 80050c2:	4c0c      	ldr	r4, [pc, #48]	; (80050f4 <__libc_init_array+0x44>)
 80050c4:	f000 f820 	bl	8005108 <_init>
 80050c8:	1b64      	subs	r4, r4, r5
 80050ca:	10a4      	asrs	r4, r4, #2
 80050cc:	2600      	movs	r6, #0
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d8:	4798      	blx	r3
 80050da:	3601      	adds	r6, #1
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e2:	4798      	blx	r3
 80050e4:	3601      	adds	r6, #1
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	08005198 	.word	0x08005198
 80050ec:	08005198 	.word	0x08005198
 80050f0:	08005198 	.word	0x08005198
 80050f4:	0800519c 	.word	0x0800519c

080050f8 <memset>:
 80050f8:	4402      	add	r2, r0
 80050fa:	4603      	mov	r3, r0
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d100      	bne.n	8005102 <memset+0xa>
 8005100:	4770      	bx	lr
 8005102:	f803 1b01 	strb.w	r1, [r3], #1
 8005106:	e7f9      	b.n	80050fc <memset+0x4>

08005108 <_init>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr

08005114 <_fini>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr
